classDiagram
    CheesGame *-- Board
    CheesGame <.. Player
    CheesGame *-- GameStatus
    CheesGame *-- GameResult
    CheesGame <.. MoveValidator
    CheesGame <.. GameRules
    CheesGame <.. Move
    CheesGame <.. EndGame

    Player *-- Color
    Player *-- PlayerType
    Player <|-- HumanPlayer
    Player <|-- AIPlayer

    DifficultLevel --* AIPlayer

    Position -- Move
    Position ..> CheesGame

    Move *-- MoveType

    Board o-- Piece

    Piece *-- PieceType
    Piece <|-- King
    Piece <|-- Queen
    Piece <|-- Rock
    Piece <|-- Bishop
    Piece <|-- Knight
    Piece <|-- Pawn


    class CheesGame {
      -string _id
      -int _moveCount
      -GameStatus _gameStatus
      -Player _currentPlayer
      -Board _board

      +StartGame() void
      +EndGame(GameResult result) void
      +MakeMove(Move move) void
      +IsCheck() void
      +IsCheckMate() void
    }

    class EndGame {
      +delegate EndGame(GameResult result) void
    }

    class Player {
      +int Id : readonly
      +string Name
      +PlayerType type
      +Color Color

      +MakeMove(Position startPosition, Position targetPosition) Move
      +OfferDraw() void
    }

    class HumanPlayer {
      -int _wins

      +SelectPiece(Position pos) Piece
      +ConfirmMove() boolean
    }

    class AIPlayer {
      -DifficultLevel _level
      -int _thinkingTime

      +ExecuteBestMove() Move
      +EvaluatePosition() int
    }

    class Board {
      -Piece[8][8] _squares
      -List~.Piece~ _capturedPieces

      +GenerateBoard() void
      +GetAllPieces() List~.Piece~
      +GetPiece(Position pos) Piece
      +SetPiece(Position pos) Piece
      +RemovePiece(Position pos) Piece
    }

    class Piece {
      <<abstract>>
      +string Id
      +string Name
      +string PieceType

      +GetValidMove(Board board) List~.Move~
      +GetColor() Color
      +GetPieceType() PieceType
      +CanMoveTo(Position pos, Board board) boolean
      +Move(Position newPosition) void
    }

    class King {
      -booleanean _inCheck
      +GetValidMove(Board board) List~.Move~
      +IsInCheck(Board board) boolean
    }

    class Queen {
      +GetValidMove(Board board) List~.Move~
      +CanMoveDiagonal(Position pos, Board board) boolean
      +CanMoveHorizontal(Position pos, Board board) boolean
      +CanMoveVertical(Position pos, Board board) boolean
    }

    class Rock {
      +GetValidMove(Board board) List~.Move~
      +CanMoveHorizontal(Position pos, Board board) boolean
      +CanMoveVertical(Position pos, Board board) boolean
    }

    class Bishop {
      +GetValidMove(Board board) List~.Move~
      +CanMoveDiagonal(Position pos, Board board) boolean
    }

    class Knight {
      +GetValidMove(Board board) List~.Move~
      +CanMoveLShapre(Position pos, Board, board) boolean
    }

    class Pawn {
      -boolean _pawnFirstMove

      +GetValidMove(Board board) List~.Move~
      +CanMoveForward(Position pos, Board board) boolean
      +CanCapture(Position pos, Board board) boolean
      +CanPromote() boolean
    }

    class Position {
      -int _row
      -int _column

      +Position(int _row, int _column)
      +IsValid() boolean
      +ToString() string
    }

    class Move {
      -Position _startPosition
      -Position _targetPosition
      -Piece _pieceType
      -MoveType _type

      +ValidateMove(Piece piece) boolean
    }

    class MoveValidator {
      +IsValidMove(Move move, Board board) boolean
      +GetAllValidMoves(Player player, Board board) List~.Move~
    }

    class GameRules {
      +IsCheckMate(Player player, Board board) boolean
      +IsStaleMate(Player player, Board board) boolean
      +IsDraw(CheeseGame game) boolean
    }

    class Color {
      <<Enumeration>>
      WHITE
      BLACK
    }

    class GameStatus {
      <<Enumeration>>
      NOT_STARTED
      IN_PROGRESS
      CHECKMATE
      STALEMATE
      DRAW
      RESIGNED
    }

    class GameResult {
      <<Enumeration>>
      WIN
      DRAW
      LOSE
    }

    class PlayerType {
      <<Enumeration>>
      HUMAN
      AI
    }

    class DifficultLevel {
      <<Enumeration>>
      EASY
      MEDIUM
      HARD
    }

    class MoveType {
      <<Enumeration>>
      NORMAL
      CAPTURE
      LSHAPE
      HORIZONTAL
      VERTICAL
      DIAGONAL
      KINGSIDE
    }

    class PieceType {
      <<enumeration>>
      KING
      QUEEN
      ROOK
      BISHOP
      KNIGHT
      PAWN
    }