---
config:
    layout: elk
---
classDiagram
    class ChessGameController {
        -int _moveCount
        -IPlayer _currentPlayer
        -List~IPlayer~ _players
        -IBoard _board
        -List~MoveRecord~ _moveHistory
        +GameStatus GameStatus
        +Action~GameResult~ OnGameEnded
        +Action~IPlayer~ OnCheckDetected
        +ChessGameController(IBoard board, IPlayer player, List~IPiece~ pieces)
        +StartGame() void
        +EndGame(GameResult result) void
        +MakeMove(IPiece piece, Position from, Position to, MoveType type) void
        +GetAllValidMoves(IPlayer player, IBoard board) List~MoveRecord~
        +GetValidMoves(IBoard board, IPiece piece, Position from) List~Position~
        +UndoMove() void
        +GenerateBoard() void
        +GetPiece(Position pos) void
        -SetPiece(IPiece piece, Position pos) void
        -RemovePiece(Position pos) void
        -IsCheck(IPlayer player, IBoard board) boolean
        -IsCheckMate(IPlayer player, IBoard board) boolean
        -IsStaleMate(IPlayer player, IBoard board) boolean
        -IsCastle(IBoard board, IPiece kingPiece, IPiece rookPiece) boolean
        -ValidateMove(IPiece piece, Position from, Position to, MoveType type) boolean
        -RecordMove(MoveRecord move) void
    }

    class Board {
        +ISquare[8,8] Squares
        +List~IPiece~ CapturedPieces
        +List~IPiece~ GetAllPieces
        +Board()
    }

    class Square {
        +IPiece Piece
        +Position Position
        +Square(IPiece piece, Position position)
    }

    class Piece {
        +PieceType Type
        +PieceColor Color
        +boolean HasMoved
        +Piece(PieceType type, Color color)
        +CanPromote(PieceType type) void
    }

    class Player {
        +string Name
        +PlayerType Type
        +PieceColor Color
        +List~IPiece~ Pieces
        +Player(string name, PlayerType type, PieceColor color)
    }

    class HumanPlayer {
        +int Wins
        +HumanPlayer()
    }

    class AIPlayer {
        -int _thinkingTime
        +AIPlayer()
        +ExecuteRandomMove() void
        +EvaluatePosition() void
    }

    class IPiece {
        <<interface>>
        +PieceType Type
        +PieceColor Color
        +boolean HasMoved
        +CanPromote(PieceType type) void
    }

    class ISquare {
        <<interface>>
        +IPiece Piece
        +Position position
    }

    class IBoard {
        <<interface>>
        +ISquare[8,8] Squares
        +List~IPiece~ CapturedPieces
        +List~Ipiece~ GetAllPieces
    }

    class IPlayer {
        <<interface>>
        +string Name
        +PlayerType Type
        +PieceColor Color
        +List~IPiece~ Pieces
    }

    class Position {
        <<struct>>
        +int Row
        +int Column
    }

    class MoveRecord {
        <<struct>>
        +Position From
        +Position To
        +MoveType Type
        +IPiece Piece
        +IPiece CapturedPiece
        +IPlayer Player
    }

    class PieceType {
        <<enumeration>>
        King
        Queen
        Rook
        Bishop
        Knight
        Pawn
    }

    class PieceColor {
        <<enumeration>>
        White
        Black
    }

    class PlayerType {
        <<enumeration>>
        Human
        AI
    }

    class GameStatus {
        <<enumeration>>
        NOT_STARTED
        IN_PROGRESS
        CHECKMATE
        STALEMATE
        RESIGNED
    }

    class GameResult {
        <<enumeration>>
        WHITE_WIN
        BLACK_WIN
        DRAW
    }

    class MoveType {
        <<enumeration>>
        Forward
        Capture
        Horizontal
        Vertical
        Diagonal
        Castle_KingSide
        Castle_QueenSide
        En_Passant
        Promote
    }

    IPiece <|.. Piece
    IPiece *-- PieceType
    IPiece *-- PieceColor

    ISquare <|.. Square
    ISquare --> Position
    ISquare --> IPiece

    IBoard <|.. Board
    IBoard --> IPiece
    IBoard --> ISquare

    IPlayer <|.. Player
    IPlayer *-- PlayerType
    IPlayer *-- PieceColor
    IPlayer --> IPiece
    Player <|-- HumanPlayer
    Player <|-- AIPlayer

    MoveRecord --> Position
    MoveRecord --> MoveType
    MoveRecord --> IPiece

    ChessGameController *-- GameStatus
    ChessGameController --> IPlayer
    ChessGameController *-- GameResult
    ChessGameController --> IBoard
    ChessGameController -- IPiece
    ChessGameController *-- MoveType
    ChessGameController --> Position
    ChessGameController --> MoveRecord
    ChessGameController <-- AIPlayer
